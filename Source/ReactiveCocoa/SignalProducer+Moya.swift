import Foundation
import ReactiveSwift
#if !COCOAPODS
import Moya
#endif

/// Extension for processing raw NSData generated by network access.
extension SignalProducerProtocol where Value == Response, Error == Moya.Error {

    /// Filters out responses that don't fall within the given range, generating errors when others are encountered.
    public func filterStatusCodes(range: ClosedRange<Int>) -> SignalProducer<Value, Error> {
        return producer.flatMap(.latest) { response -> SignalProducer<Value, Error> in
            return unwrapThrowable { try response.filterStatusCodes(range) }
        }
    }

    public func filterStatusCode(code: Int) -> SignalProducer<Value, Moya.Error> {
        return producer.flatMap(.latest) { response -> SignalProducer<Value, Error> in
            return unwrapThrowable { try response.filterStatusCode(code) }
        }
    }

    public func filterSuccessfulStatusCodes() -> SignalProducer<Value, Moya.Error> {
        return producer.flatMap(.latest) { response -> SignalProducer<Value, Error> in
            return unwrapThrowable { try response.filterSuccessfulStatusCodes() }
        }
    }

    public func filterSuccessfulStatusAndRedirectCodes() -> SignalProducer<Value, Moya.Error> {
        return producer.flatMap(.latest) { response -> SignalProducer<Value, Error> in
            return unwrapThrowable { try response.filterSuccessfulStatusAndRedirectCodes() }
        }
    }

    /// Maps data received from the signal into an Image. If the conversion fails, the signal errors.
    public func mapImage() -> SignalProducer<Image, Moya.Error> {
        return producer.flatMap(.latest) { response -> SignalProducer<Image, Error> in
            return unwrapThrowable { try response.mapImage() }
        }
    }

    /// Maps data received from the signal into a JSON object. If the conversion fails, the signal errors.
    public func mapJSON(failsOnEmptyData: Bool = true) -> SignalProducer<Any, Moya.Error> {
        return producer.flatMap(.latest, transform: { response -> SignalProducer<Any, Error> in
            return unwrapThrowable { try response.mapJSON(failsOnEmptyData: failsOnEmptyData) }
        })
    }

    /// Maps data received from the signal into a String. If the conversion fails, the signal errors.
    public func mapString() -> SignalProducer<String, Moya.Error> {
        return producer.flatMap(.latest) { response -> SignalProducer<String, Error> in
            return unwrapThrowable { try response.mapString() }
        }
    }
}

/// Maps throwable to SignalProducer
private func unwrapThrowable<T>(throwable: () throws -> T) -> SignalProducer<T, Moya.Error> {
    do {
        return SignalProducer(value: try throwable())
    } catch {
        if let error = error as? Moya.Error {
            return SignalProducer(error: error)
        } else {
            // The cast above should never fail, but just in case.
            return SignalProducer(error: Moya.Error.underlying(error as NSError))
        }
    }
}
