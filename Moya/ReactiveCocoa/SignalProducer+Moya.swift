import Foundation
import ReactiveCocoa

/// Extension for processing raw NSData generated by network access.
extension SignalProducerType where T: MoyaResponse, E == NSError {
    
    /// Filters out responses that don't fall within the given range, generating errors when others are encountered.
    public func filterStatusCodes(range: ClosedInterval<Int>) -> SignalProducer<T, E> {
        return producer.flatMap(.Latest) { response in
            guard range.contains(response.statusCode) else {
                return SignalProducer(error: NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.StatusCode.rawValue, userInfo: ["data": response]))
            }
            return SignalProducer(value: response)
        }
    }
    
    public func filterStatusCode(code: Int) -> SignalProducer<T, E> {
        return filterStatusCodes(code...code)
    }
    
    public func filterSuccessfulStatusCodes() -> SignalProducer<T, E> {
        return filterStatusCodes(200...299)
    }
    
    public func filterSuccessfulStatusAndRedirectCodes() -> SignalProducer<T, E> {
        return filterStatusCodes(200...399)
    }
    
    /// Maps data received from the signal into a UIImage. If the conversion fails, the signal errors.
    public func mapImage() -> SignalProducer<UIImage, E> {
        return producer.flatMap(.Latest) { response in
            guard let image = UIImage(data: response.data) else {
                return SignalProducer(error: NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.ImageMapping.rawValue, userInfo: ["data": response]))
            }
            return SignalProducer(value: image)
        }
    }
    
    /// Maps data received from the signal into a JSON object. If the conversion fails, the signal errors.
    public func mapJSON() -> SignalProducer<AnyObject, E> {
        return producer.flatMap(.Latest) { response in
            do {
                return SignalProducer(value: try NSJSONSerialization.JSONObjectWithData(response.data, options: .AllowFragments))
            } catch {
                return SignalProducer(error: error as NSError)
            }
        }
    }
    
    /// Maps data received from the signal into a String. If the conversion fails, the signal errors.
    public func mapString() -> SignalProducer<String, E> {
        return producer.flatMap(.Latest) { response in
            guard let string = NSString(data: response.data, encoding: NSUTF8StringEncoding) else {
                return SignalProducer(error: NSError(domain: MoyaErrorDomain, code: MoyaErrorCode.StringMapping.rawValue, userInfo: ["data": response]))
            }
            return SignalProducer(value: string as String)
        }
    }
}
